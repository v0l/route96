apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-deployment"
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/part-of: {{ .Release.Name }}
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/part-of: {{ .Release.Name }}
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - name: my-container
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
        env:  # TODO: Translate these to the value.yaml file, and template here.
          - name: APP__LISTEN
            value:  0.0.0.0:8000
          - name: APP__DATABASE
            value:  postgres://postgres:root@db:5432/route96 # TODO: Update the connection string here
          - name: APP__STORAGE_DIR
            value:  /app/data
          - name: APP__MAX_UPLOAD_BYTES
            value:  5000000000
          - name: APP__PUBLIC_URL
            value:  http://localhost:8000  # TODO: check in with Daniel on this config, since the Ingress manifest will control it.
          - name: APP__NIP29_RELAY__URL
            value:  wss://communities.nos.social
          - name: APP__NIP29_RELAY__PRIVATE_KEY
            value:  6b911fd37cdf5c81d4c0adb1ab7fa822ed253ab0ad9aa18d77257c88b29b718e  # TODO: this will need to come from a sealed secret, replace with prod value.
          - name: APP__NIP29_RELAY__CACHE_EXPIRATION
            value:  300        
          - name: SECRET_VALUE_EXAMPLE
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-secret" # TODO: match this name up with sealed-secret.yaml
                key: secret-key
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 3
        ports:
        - containerPort: 8000
          protocol: TCP
        volumeMounts:
        - name: "{{ .Release.Name }}-storage"
          mountPath: /data
      volumes:
      - name: "{{ .Release.Name }}-storage"
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-pvc"
